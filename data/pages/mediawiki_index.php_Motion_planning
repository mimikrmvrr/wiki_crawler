Motion planning  Алгоритми за планиране на траектория 
			от Съзтезателно програмиране
			
									Направо към: навигация, търсене			
			 if (window.showTocToggle) { var tocShowText = "показване"; var tocHideText = "скриване"; showTocToggle(); }   Алгоритми за планиране на траектория 
(Статията не е завършена още)
Алгоритмите за планиране на траектория ( motion – planning algorithms ) имат огромно практическо приложение в най-различни дисциплини  ( автоматизация на различни видове дейности  , архитектурен дизайн , изследването на биологичните молекули , създаване на игри  и мн. други ) и за това в тази статия ще се ограничим до основните категории алгоритми. По-точно  ще наблегнем на въпроса за тяхната приложимост при различни типове състезателни задачи (най-вече тези ,  които по един или друг начин изискват намирането на оптимален път между два обекта с наличието на препятствия между тях ).

  Намиране на допустим път между две точки 
Нека разгледаме следната опростена постановка на главния проблем , с който се занимава motion-planning-a ( който в общия 
случай е доста труден за решаване ) , а именно : дадено ни е някакво множество от геометрични обекти в равнината , начална точка и крайна точка  и търсим оптимален път от началната до крайната точка ( в случая критерия за оптималност може да е различен за конкретната ситуация – в повечето случаи е най-кратък път ). Забележете , че тук  началния обект може да не е точка , ами например многоъгълник , но тогава идва въпроса за неговата ротация и транслация , което допълнително усложнява задачата ( и което е разгледано по-надолу в статията ). 
Със Сfree ще означаваме свободното  пространство ( ако B e достатъчно голям правоъгълник, който обхваща всички зададени обекти, а Pi ( i = 1 .. n) са ни препятствията, то Cfree се определя като В/{/union}Pi ).  Преди да дадем алгоритъм за намиране на допустим път между два обекта в конфигурационното пространство ще опишем подходяща структура, която да пази информацията за Сfree. Нека от всеки връх на препядствията  спуснем вертикална линия до пресичането и със страните на B. Лесно се вижда, че регионите, които се получават са трапци ( може и триъгълник да се получи, но това си е просто частен случай на трапец ). Множествотo от трапците, които са във Сfree образуват т.н. трапецоидна карта. Паралелно с нейното построяване ще изградим и подходяща структура D, която пази информация за трапците ( чрез нея може да определим лесно в кой трапецоид се намира дадена точка от Cfree ).  Самата структура е кореново дърво, чийто листа представляват трапците, а междинните върхове могат да са два типа – х-върхове ( на които съответства някоя крайна точка от сегмент или у-върхове, на които съответства цял сегмент ).  При задаване на някаква заявка за намиране на трапецоида, към който принадлежи дадена точка p, започваме обхождането от корена и ако сме във х-връх то проверяваме дали p се намира наляво или надясно от вертикалната права през точката, която отговаря на х-върха, а ако сме във у-връх, то проверяваме дали p се намира под или над сегмента представляван от у-върха ( ще се подсигурим, че след като сме във у-връх , то вертикалната линия през p пресича сегмента през y-върха. Интуицията зад избора на подобна структура се състои в моделирането на прехода между съседни трапецоиди.

Алгоритъм за построяване на трапецоидна карта (TrapezoidalMap)

 Вход: Множество S от n непресичащи се сегмента 
 Изход:  Трапецоидна карта Т(S) и подходяща структура за претърсване D
// Coming Soon

Алгоритъм за намиране на свободното пространство

 Вход: Множество S от непресичащи се многостени (препятствията)
 Изход: Трапецоидна карта спрямо S
	Нека Е е множеството от страните на многостените;
	TrapezoidalMap( Е );
	Премахване на трапецоидите, които лежат във многостените и връщаме останалите;
Алгоритъм за намиране на допустим път между два обекта в равнината с наличие на препядствия ( непресичащи се изпъкнали многоъгъници )
// Coming soon

  Намиране на минимален път между две точки 
Разгледаният по-горе метод ни дава един допустим път, който обаче може да се окаже доста неоптимален. Възможно е да направим лека оптимизация като добавим цени на ребрата, които свързват отделните върхове в образувания граф и които се определят от евклидовото разстояние в равнината, след което да използваме някакъв алгоритъм за намиране на най-къс път в граф ( Дейкстра например ).  Очевидно полученият път отново не гарантира да е оптимален.  Следната лема ни дава критерий, по който да търсим оптимален път:

  Лема:  Най-късият път между начална и крайна точка в развнината с наличие на множество S
  от многостенни препятствия е начупена крива, чийто вътрешни върхове са от S.

Ще построим граф на видимост за конфигурационно пространство, който се определя от върховете на препятствията както и двете крайни точки. След това ще приложим алгоритъма на Дейкстра за така получения граф (цените на ребрата отново се определят от евклидовото разстояние между точките в равнината). От горната лема следва, че при така зададената постановка най-късият път между началната и крайната точка е глобално най-къс.

Алгоритъм за намиране на най-къс път между две точки в равнината с наличие на препятствия между тях  ( ShortestPath(S,start,end) )

   Вход:  Множество S от многостенни препятствия
   Изход: Най-късият път между start и end ,който не се сблъсква с препятствие
	G = VisibilityGraph( S {/union} {start,end});
	На всяко ребро <math>е_{ij}</math> от G добавяме цена равна на дължината на сегмента ij;
	Използваме алгоритъма на Дейкстра ,за да намерим най-късия път между start и end в G;
Съществената част тук е построяването на G. Наивният подход би ни довел до алгоритъм със сложност О( <math>n^3 </math> )  ( О(n) сложност за проверка на засичане на сегмент с някое от препятствията ,а броя на сегментите е от порякъка на  <math>n^2  </math>  ).  Ще подходим значително по-рационално като вземем предвид сегментите в дадена последователност и намерим за всеки връх тези върхове, които са видими от него (тоест отсечката, която ги свързва не пресича нито едно препятствие). 

Алгоритъм за построяване на графа на видимост (VisibilityGraph( S ) )

 Вход:  Множество S от непресичащи се многостенни препятствия.
 Изход:  Граф на видимост спрямо S
	Нека G(V,E) е граф, V =  върховете на S , E = празното множество;
	За всички върхове v от G:
	         Нека W = VisibleVertices( v,S )
	         За всяко w от W добавяме реброто vw към Е;
	Връщаме G като резултат;
Алгоритъм видими върхове ( VisibileVertices(p,S) )

	Вход: Множество S от многостени и точка p, която не лежи във вътрешността на нито един от тях. 
	Изход: Множеството от всички върхове на препятствия видими от S. 
	Сортираме върховете на препятствията спрямо ъгъла образуван при въртене по часовникова стрелка на правата между p и точка от S (по-точно лъча от p към S) и положителната посока на правата Ox транслирана в точка p (виж фиг. по-долу) . В случай на равни ъгли пръв идва върха, който е по близо до p. Нека w1, … , wn е сортирания списък от върхове;
	Нека означим с t лъча образуван от точка p, паралелен на Ox и положително-ориентиран. Намираме страните на препятствията, които се засичат от t и ги съхраняваме в същия ред в балансирано двоично дърво за претърсване;
	Нека W = празното множество;
	За i = 1 до n
	          Ако е Visible(<math>w_{i}</math>) тогава добавяме <math>w_{i}</math> към W Добавяме в T страните на препятствията инцидентни с <math>w_{i}</math> и намиращи се отдясно спрямо лъча от :p към <math>w_{i}</math>, а тези отляво ги премахваме от Т;	          
      Връщаме W;
Преди да дадем и описание Visible ще дадем малко разяснения. Вероятно някои от вас забелязват сходството на VisibleVertices със Plane-Sweep алгоритмите.  Този факт далеч не е случаен – както при Plane-Sweep алгоритмите, така и тук редът на проверките играе съществена роля за спестяването на допълнителни изчисления. 
// Coming soon
По-долу е представена примерна имплементация на алгоритъма за намиране на най-къс път между две точки с препятствия между тях .
// Coming soon

  Други разновидности на проблема 
Началният обект е многоъгълник.
При една постановка , в която началния обект не е просто точка , а някаква геометрична фигура кофигурационното пространство се определя посредством три параметъра за позицията на обекта – разположение по х и у координати на центъра му, както и ъгъл на ротация фи. Положението ще го задаваме чрез  R(x,y,фи) ( забележете, че това не може да се отъждестви с 3-мерното евклидово пространство, а по-скоро като R2 x [0,360] ). Mножеството от всички допустими позиции ще означаваме с  C ( R ).

  Примерна задача 
Timus 1199 Mouse
В задачата се търси максимално безопасен път между две точки с наличие на препятствия (изпъкнал многостен) между тях като за опасен се счита път, който е на разстояние повече от 10 см. от всеки многостен. Освен това е дадено, че всеки две препятсвия са на повече от 20 см. разстояние едно от друго. Изисква се освен това и отсечките от кривата на минималния път да са или изцяло в опасна или изцяло в безопасна зона ( с изключение на краищата им ).
Ще сведем задачата до задача за намиране на минимален път в граф като намерим най-късите отсечки свързващи всяка двойка многостени, както и между крайните точки и многостените и използваме алгоритъма на Дейкстра за намиране на търсения път. Забележете, че тук дори не е необходимо да правим проверка за засичане на някоя от тези отсечки с някоя от стените на многостена ( ако има такова засичане , то въпросната отсечка няма да участва в минимален път и съответно няма да присъства като част от кривата на пътя ). Методите PointToPoly и PolyDist намират съответно най-късото разстояние от точка до многостен , както и между два многостена. Най-късият сегмент от точка може да е към връх от многостена или към пресечната точка на перпендикуляр към страна на многостена със самата страна. Понеже се изисква всяка част от маршрута да е или изцяло безопасна или изцяло опасна то определяме граничните точки, на разстояние 10 см. от съответните два многоъгълника. През цялото време пазим индексите на съответните точки и за целта изпозваме допълнителния брояч sz , като за крайните точки имаме индекси 0 и 1 съответно, а за всеки многостен пазим началото на индекса за неговите върхове ( това индексиране е с цел по-лесно прилагане на Дейкстра ).


#include<iostream>
// #include<fstream>
#include<math.h>
#include<vector>
#include<queue>
#include<stack>
#include<algorithm>

using namespace std;

#define MAX 20001
#define EPS 1e-9
#define EPSINIT 1e-12
#define INV 1e12
#define INFI 1e14

// ===========================================

struct Point
{
       friend istream& operator>> (istream& in , Point& p1)
              {
               in >> p1.x >> p1.y;
               return in;
              }
       Point(long double a = 0 ,long double b = 0) : x(a), y(b) {}
       bool operator==(Point const& p) const
            {
             return (fabs(x-p.x) < EPS && fabs(y-p.y) < EPS);
            }
       long double x,y;
};

struct Segment
{
       Segment() {dist = INV;}
       Segment(Point const& A , Point const& B)
          {
           a = A;
           b = B;
           x = B.x - A.x;
           y = B.y - A.y;
           dist = sqrt(x*x + y*y);
          }
       Segment const& operator=(Segment const& s)
               {
                x = s.x;
                y = s.y;
                dist = s.dist;
                a = s.a;
                b = s.b;
                index[0] = s.index[0];
                index[1] = s.index[1];
                return *this;
               }
       long double x,y, dist;
       Point a,b;
       int index[2];
};

// ===========================================

struct Line
{
       long double A,B,C;
       int INF;
       Line()
            {
             INF = -1;
            }
       
       Line(Point const& a, Point const& b)
            {
             INF = 0;
             A = b.y - a.y;
             B = a.x - b.x;
             C = -B*b.y -A*b.x;
             if(a == b) INF = 1;
            }
            
       Line(Segment const& seg , Point const& pt)
            {
             A = seg.y;
             B = -seg.x;
             C = seg.x*pt.y - seg.y*pt.x;
             INF = 0;
             if(fabs(seg.dist) < EPS) INF = 1;
            }
};

// ===========================================

struct Poly
{
       vector<Point> p;
       int ind;
       
       void add(Point pt)
            {
             p.push_back(pt);
            }
       
       Point& operator[](int i)
              {
               return p[i];
              }
            
       int Size() const
            {
             return p.size();
            }
};

// ===========================================

Point Intersect(Line const& L1 , Line const& L2)
     {
      long double cross1 = L1.A*L2.B - L1.B*L2.A,
                  cross2 = L1.C*L2.A - L1.A*L2.C,
                  cross3 = L1.B*L2.C - L1.C*L2.B;
      Point tmp;
      if(fabs(cross1) < EPS)
      {
     	tmp.x = tmp.y = INV;
      }
      else
      {
        tmp.y = cross2/cross1;
        tmp.x = cross3/cross1;
      }
      return tmp;
     }

// ===========================================

bool Between(long double pt , long double s , long double e)
{
	return (pt > s && pt < e);
}

// ===========================================

bool SegIntersect(Segment const& S1,Segment const& S2)
{
	Line A(S1.a,S1.b);
	Line B(S2.a,S2.b);
	
	Point tmp = Intersect(A,B);
	if(   (!Between(tmp.x,S1.a.x,S1.b.x)&&!Between(tmp.x,S1.b.x,S1.a.x))
       || (!Between(tmp.y,S1.a.y,S1.b.y)&&!Between(tmp.y,S1.b.y,S1.a.y))
       || (!Between(tmp.x,S2.a.x,S2.b.x)&&!Between(tmp.x,S2.b.x,S2.a.x))
       || (!Between(tmp.y,S2.a.y,S2.b.y)&&!Between(tmp.y,S2.b.y,S2.a.y)))
         return false;
	else
	     return true;
}

// ===========================================

long double dot(Segment& a , Segment& b)
{
     return (a.x*b.x + a.y*b.y);
}

// ===========================================

Segment PointToPoly(Point& pt , Poly& poly , int pt_index)
{
      Segment min1,tmp,seg,tmp2;
      for(int i = 0; i < poly.Size()-1; i++)
              {
               tmp = Segment(poly[i],poly[i+1]);
               seg = Segment(poly[i+1],pt);
               if(dot(tmp,seg) > 0)
                   {
                    if(min1.dist > seg.dist)
                        {
                         min1 = seg;
                         min1.index[0] = poly.ind + i + 1;
                         min1.index[1] = pt_index;
                        }
                    continue;
                   }
               tmp.x = -tmp.x;
               tmp.y = -tmp.y;
               seg = Segment(poly[i],pt);
               if(dot(tmp,seg) > 0)
                   {
                    if(min1.dist > seg.dist)
                        {
                         min1 = seg;
                         min1.index[0] = poly.ind + i;
                         min1.index[1] = pt_index;
                        }
                    continue;
                   }
                   
               tmp2.x = tmp.y;
               tmp2.y = -tmp.x;
               Line l1(tmp,poly[i]),
                    l2(tmp2,pt);
               seg = Segment(Intersect(l1,l2),pt);
               if(seg.dist < min1.dist)
                   {
                    min1 = seg;
                    min1.index[0] = poly.ind + i;
                    min1.index[1] = pt_index;
                   }
              }

      return min1;
}

 Segment PolyDist(Poly& A , Poly& B)
{
        Segment tmp,min1;
        for(int i = 0 ; i < A.Size() - 1 ; i++)
             {
              tmp = PointToPoly(A[i],B,A.ind + i);
              if(tmp.dist < min1.dist) min1 = tmp;
             }
        for(int i = 0 ; i < B.Size() - 1; i++)
             {
              tmp = PointToPoly(B[i],A,B.ind + i);
              if(tmp.dist < min1.dist) min1 = tmp;
             }
        return min1;
}

// ===========================================

struct PrepSearch
{
       vector<pair<long double , int> > n;
       Point p;
       int size()
           {
            return n.size();
           }
       pair<long double,int>& operator[](int i)
                 {
                  return n[i];
                 }
       void Add(pair<long double,int>const & pr)
                 {
                  n.push_back(pr);
                 }
};

int res[MAX];
PrepSearch arr[MAX];

int sz = 2;

// ===========================================

void Dijkstra()
{
       long double dist[MAX];
       priority_queue<pair<long double,int> , vector<pair<long double,int> > ,greater<pair<long double , int> > > p;
       int v,used[MAX];
       for(int i = 0 ; i < sz ; i++)
              dist[i] = INFI;
       dist[0] = 0;
       res[0] = -1;
       p.push(pair<int,int>(0,0));
       while(!p.empty())
         {
          pair<long double,int> tmp = p.top();
          int v = tmp.second;
          p.pop();
          if(v == 1) break;
          if(used[v]) continue;
          used[v] = 1;
          for(int i = 0 ; i < arr[v].size() ; i++)
                  if(!used[arr[v][i].second])
                   if( dist[arr[v][i].second] > arr[v][i].first + dist[v])
                        {
                         dist[arr[v][i].second] = arr[v][i].first + dist[v];
                         res[arr[v][i].second] = v;
                         p.push(pair<long double,int>(dist[arr[v][i].second],arr[v][i].second));
                        }
         }
}

// ===========================================

int main()
{
//  ifstream cin("test2.txt");
    int polys , poly_sz;
    Point start , end , tmp;

    Poly p[MAX];
      
    cin >> start >> end >> polys;
    
    for(int i = 0 ; i < polys ; i++)
            {
             cin >> poly_sz;
             for(int j = 0 ; j < poly_sz ; j++)
                     {
                      cin >> tmp;
                      p[i].add(tmp);
                      arr[sz+j].p = tmp;
                     }
             p[i].ind = sz;
             sz += poly_sz;
             p[i].add(p[i][0]);
            }
    int v;
    for(int i = 0 ; i < polys ; i++)
            for(int j = 0 ; j < p[i].Size() - 1 ; j++)
                    {
                     v = (j+1)%(p[i].Size() - 1);
                     arr[p[i].ind + j].Add(make_pair(EPSINIT,p[i].ind + v));
                     arr[p[i].ind + v].Add(make_pair(EPSINIT,p[i].ind + j));
                    }
     arr[0].p = start;
     arr[1].p = end;
    
    Segment segs[100][10];
    for(int i = 0 ; i < polys; i++)
             for(int j = 0; j < p[i].Size() - 1; j++)
                     segs[i][j] = Segment(p[i][j],p[i][j+1]);
    
    Segment s1,s2,min_seg;
    int k;
    for(int i = 0 ; i < polys - 1; i++)
              for(int j = i+1 ; j < polys; j++)
                     {
                      s1 = PolyDist(p[i],p[j]);
                      s2 = PolyDist(p[j],p[i]);

                      min_seg = ((s1.dist < s2.dist) ? s1 : s2);
                      
                      arr[sz].Add(make_pair(EPSINIT, min_seg.index[0]));
                       
                      arr[sz].Add(make_pair(min_seg.dist - 0.2, sz+1)); 
 
                      arr[sz].p.x = (min_seg.x/min_seg.dist)*0.1 + min_seg.a.x;
                      arr[sz].p.y = (min_seg.y/min_seg.dist)*0.1 + min_seg.a.y;
                      sz++;
                      arr[sz].Add(make_pair(EPSINIT, min_seg.index[1]));
                      arr[sz].Add(make_pair(min_seg.dist - 0.2, sz-1));
                      arr[sz].p.x = -(min_seg.x/min_seg.dist)*0.1 + min_seg.b.x;
                      arr[sz].p.y = -(min_seg.y/min_seg.dist)*0.1 + min_seg.b.y;
                      sz++;
                      arr[min_seg.index[0]].Add(make_pair(EPSINIT,sz-2));
                      arr[min_seg.index[1]].Add(make_pair(EPSINIT,sz-1));
                     }
    for(int i = 0 ; i < polys ; i++)
                 {
                  s1 = PointToPoly(start,p[i],-1);

                  arr[sz].Add(make_pair(EPSINIT, s1.index[0]));
                  arr[s1.index[0]].Add(make_pair(EPSINIT,sz));

                  long double d1 = ((s1.dist < 0.1) ? EPSINIT : s1.dist);
                  
                  arr[sz].Add(make_pair(d1, 0));
                  arr[0].Add(make_pair(d1, sz));
                  arr[sz].p.x = ( s1.dist < EPS ? 0 : (s1.x/s1.dist) )*0.1 + s1.a.x;
                  arr[sz].p.y = ( s1.dist < EPS ? 0 : (s1.y/s1.dist) )*0.1 + s1.a.y;
                  sz++;                 
                 }
        for(int i = 0 ; i < polys ; i++)
                 {
                  s1 = PointToPoly(end,p[i],-1);
                    arr[sz].Add(make_pair(EPSINIT, s1.index[0]));
                    arr[s1.index[0]].Add(make_pair(EPSINIT,sz));
                    
                    long double d1 = ((s1.dist < 0.1) ? EPSINIT : s1.dist);
                    
                    arr[sz].Add(make_pair(d1, 1));
                    arr[1].Add(make_pair(d1, sz));
                    arr[sz].p.x = ( s1.dist < EPS ? 0 : (s1.x/s1.dist) )*0.1 + s1.a.x;
                    arr[sz].p.y = ( s1.dist < EPS ? 0 : (s1.y/s1.dist) )*0.1 + s1.a.y;
                    sz++;                 
                 }
                 
           s1 = Segment(start,end);
            for(k = 0 ; k < polys; k++)
                           {
                            int o;
                            for(o = 0; o < p[k].Size() - 1; o++)   
                                  if(SegIntersect(s1,segs[k][o])) break;
                            if(o != p[k].Size() - 1) break;
                          }
            if(k == polys)
                 {
                  arr[0].Add(make_pair(s1.dist, 1));
                  arr[1].Add(make_pair(s1.dist, 0));
                 }
        
        Dijkstra();
        stack<Point> st;
        k = 1;
        while(k != -1)
             {
              st.push(arr[k].p);
              k = res[k];
             }
        cout.precision(7);
        cout.setf(ios::fixed);
        cout << st.size() << endl;
        while(!st.empty())
             {
              cout << ((fabs(st.top().x) < EPS) ? 0 : st.top().x) << ' '
                   << ((fabs(st.top().y) < EPS) ? 0 : st.top().y) << endl;
              st.pop();
             }

// system("pause");
return 0;
}


Полезни връзки

    [Berg] Computational Geometry – Mark de Berg
    [LaVelle] Planning Algorithms – Steven M. LaVelle 
    [VGraph] http://www.geometrylab.de/VisGraph/index.html.en
    [RMap] http://people.cs.uu.nl/roland/pdf/smallGraphs.pdf
    [PRppt] http://ai.stanford.edu/~latombe/cs26n/2007/point-robot.ppt

Взето от „http://judge.openfmi.net:9080/mediawiki/index.php/Motion_planning“.
			Категории: Състезателно-Програмиране-2009 | Алгоритми | Геометрия			
						
		
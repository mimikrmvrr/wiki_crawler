Хеш Функции
			от Съзтезателно програмиране
			
									Направо към: навигация, търсене			
			 if (window.showTocToggle) { var tocShowText = "показване"; var tocHideText = "скриване"; showTocToggle(); }   Определение 
Определение 1: Хеш функция H е трансформация, която при въвеждане на m връща стринг с определена дължина, който се нарича хеш стойност h ( h=H(m)).
Определение 2: Хеш функция (или хеш алгоритъм) е метод, който преобразува данни в число, подходящо за манипулиране от компютъра. Тези функции осигуряват начин за създаване на малки дигитални „отпечатъци” от всякакъв тип данни. Тези „отпечатъци” често са наричани хеш стойности. Хеш стойностите обикновено се представят в шетнайсететична бройна система.

  Свойства 
Фундаментално свойство на всички хеш функции е, че ако две хеш стойности (спрямо една хеш функция) са различни, то и въведените данни се различават по някакъв начин.Tова свойство е следствие от определеността на хеш функциите. От друга страна, ако две хеш стойности са еднакви, това не означава, че въведените данни са еднакви.
Типичните хеш функции имат безкрайна област на допустимите стойности, каквито са  например битовите низове с произволна дължина, и крайно множество от стойности, като например битови последователности с фиксирана дължина. В определени случаи хеш функциите могат да бъдат проектирани със съответствие 1:1 между равни по големина област на допустимите стойности и област на стойностите на функцията. Хеш функциите, които изразяват съответствие 1:1 се наричат още пермутации. Обратимостта се постига като се използват последователности от обратими „смесващи” операции върху входните данни на функцията.

  Видове 
  Видове методи за хеширане 
Хеш функциите типично се раличават по начина, по който се изчисляват хеш стойностите от въведените данни. Има два основни метода за изпълнение на хеш алгоритъм:

 Кумулативен - Това е случаят, когато хешът се конструира като се преминава през входните данни и една начална стойност последователно се увеличава с изчислена стойност, отнасяща се за елемент от входните данни. Изчислението, приложено върху стойността на елемента обикновено е умножение с просто число.
 Ротационен - Също, като при кумулативния метод, всеки елемент от въведените данни се използва за конструиране на хеша, но за разлика от него данните се подлагат на  побитово преместване. Обикновено се използва комбинациа от ляво и дясно преместване. Броят на преместванията е също просто число. Резултатът от всяко изчисление се добавя към някаква пресметната вече сума. Крайният резултат е самият хеш.
  Видове форми на хеширане 
Хеширането, като средство за съпоставяне на някакви данни с идентификатор, има различни практически приложения. Ето няколко примера:

 Хеш функции върху низове - Използва се главно в областта на достъпа до съхранени данни, основно при индексиране на данни и като структурна основа на асоциативни контейнери (напр. хеш-таблици).
 Геометрично хеширане - метод за ефикасно намиране на геометрични обекти или подобни по форма, дори и да са завъртяни или по друг начин преобразувани. Тези обекти са представени със претеглени триъгълници, така че всеки ъгъл има размер единица. Тези триъгълници се пазят в обикновена хеш-таблица.
 Криптографско хеширане - Използва се за проверка и автентикация на потребители и данни.
  Приложения 
  Реализация на Map и Set 
 Често вградени в стандартната библиотека
 Предлага по-добра сложност в средния случай
Hash map или Хеш-таблици (hash table) е структура от данни, която свързва ключ със стойност. Ключът е уникален за разлика от данните - не може да съществуват два елемента с един и същи ключ. Основно действие на хеш таблиците е: при даден ключ да се намери съответната стойност.
Тук ще дадем трето определение на хеш функция.
Определение 3: Процесът, при който адреса на елемента в хеш-таблицата се определя от ключа му с константа на сложност се нарича хеширане. За хеширане се използва функция, която на всеки от възможните ключове съпоставя еднозначно валиден адрес. Самата функция се нарича хеш-функция. Например нека представянето на хеш-таблицата ни е n-елементен масив. Числото n се нарича капацитет на таблицата. При включването на елемент той трябва да се разположи на валиден адрес - между 0 и n-1. Една възможна функция, в случай че ключа е число, е остатък при деление на n. Така си гарантираме, че полученият резултат винаги е валиден. (Хеш-таблици)

  Dictionary 
(структура от данни)
Определение: Абстрактен тип данни, който съхранява стойности. Достъпът до стойностите е посредством асоциативен ключ. Основни операции са new, insert, find и delete. Познат още като асоциативен списък, map.
Операциите new(), insert(k, v, D) и find(k, D) могат да се дефинират по следния начин:

  1. new() връща dictionary
  2. find(k, insert(k, v, D)) = v
  3. find(k, insert(j, v, D)) = find(k, D) if k ≠ j

където k и j са ключове, v е стойност, а D е dictionary.

  4. delete(k, new()) = new()
  5. delete(k, insert(k, v, D)) = delete(k, D)
  6. delete(k, insert(j, v, D)) = insert(j, v, delete(k, D)) if k ≠ j

Ако искаме find да е тотална функция, може да дефинираме find(k, new()), като използваме специална стойност: fail. Това променя само типа, който find връща.

  7. find(k, new()) = fail

Реализации: свързан списък, хеш таблици, B-tree и др.

  Set 
(структура от данни)
Определение: Неподредена колекция от стойности без повторения. Група от елементи с 3 свойства:

 всички елементи са от едно множество (вселена).
 Всеки елемент или принадлежи на нашия set, или не.
 Елементите нямат ред.
Основни операции са: isIn(v, S), която казва дали елемент е член на на set-а; add(v, S) и remove(v, S); isEmpty.

  1. new() returns a set
  2. isIn(v, new()) = false
  3. isIn(v, add(v, S)) = true
  4. isIn(v, add(u, S)) = isIn(v , S) if v ≠ u
  5. remove(v, new()) = new()
  6. remove(v, add(v, S)) = remove(v, S)
  7. remove(v, add(u, S)) = add(u, remove(v, S)) if v ≠ u 

където S е set, а u и v са елементи.

  8. isEmpty(new()) = true
  9. isEmpty(add(v, S)) = false

  Индексиране 
Различни неща се сравняват по хешове
Пример: Нека в база от данни се съхраняват текстове на даден език (да кажем английски) и техните преводи на други езици. В даден момент ни трябва да проверим дали на даден английски текст има превод на френски. Тогава трябва да сравняваме текста със всички записи в базата, докато не намерим този, който ни трябва. Но ако текста е много голям, това решение не е удачно. Затова в таблицата вместо самия текст на английски, се съхранява неговата хеш стойност и при търсене на даден текст просто се сравняват хеш стойности. При по-добри хеш функции, като MD5, може да се разчита, че ако хешовете са различни, то и входните данни са различни.
Хеширането може да се използва и като създаване на индекс структури.
Хеш индексите организират ключовете и техните указатели към съответните им елементи в хеш файлова структура.
Блок (bucket) - единица за съхранение на данни, съдържаща един или повече записа.
Изпълняваме хеш функция върху даден ключ, за да идентифицираме блок и в него записваме ключа и указателя към съответния му елемент.
По-точно казано, хеш индексите са винаги вторични индекси.

  Криптография 
Хеш функциите използвани в криптографията имат някои допълнителни свойства, които ги правят удобни за употреба главно при различни приложения свързани със сигурност на информацията, като проверка на съобщения за автентичност и цялостност. Изискванията за тези функции са:

 Въведените данни могат да са с произволна дължина.
 Хеш стойностите имат фиксирана дължина.
 H(x) е относително лесно да се изчисли за всяко х.
 H(x) е еднопосочна функция (one-way function) или функция със задна врата (trapdoor functions).
 Н(х) е силно защитена от колизии.
Ако е дадено х и е възможно чрез изчисление да се намери у, такова че у е различно от х и е изпълнено Н(у) = Н(х), то в този случай се казва, че функцията Н е слабо защитена от колизии. Силно защитена от колизии хеш функция Н е тази, при която е невъзможно чрез изчисления да се намерят произволни х и у, за които да е изпълнено Н(х) = Н(у).

  One-way Functions 
Еднопосочни функции (one-way functions) - Еднопосочна функция е лесна за пресмятане, но е трудно обратима, където трудно обратима означава, че ако е дадена хеш стойност h, то е много трудно чрез изчисление да се намери х, който удовлетворява Н(х) = h.
Точното значение на "лесно" и "трудно" може да се определи математически:
"Лесно" означава, че даден алгоритъм може да пресметне функцията за полиномно време. "Трудно" означава, че такъв  алгоритъм не съществува. "Трудно" в контекста на еднопосочните фунцкии, се отнася за средния случай. Трудността се доказва с произволно саморедуциране.
С редки изключения почти цялата област на криптографията с публични ключове се базира на еднопосочните функции.

  Trapdoor Functions 
Фунцкии със задна врата (trapdoor functions) - Функция със задна врата е лесно изчислима в едната посока и трудно изчислима в обратната, ако не е известна специална информация, наричана задна врата или "trapdoor". Тези функции са широко разпространени в криптографията.
Нека f е trapdoor функция и съществува тайна информация у, такава че при дадени f(x) и у, тогава е лесно да се изчисли х. Пример: ако разглобите двигател, няма да ви е лесно да го сглобите отново, ако нямате инструкци. Тези инструкции са вашата задна врата (trapdoor), която ще ви позволи да върнете двигателя в първоначалното му състояние.

  Приложение 
Хеш функциите често се използват за хеширане на потребителски пароли и съхранение на хешовете, вместо самите пароли.
Криптографските хеш функции се изпозват още и като необратими компресиращи функции, тъй като могат да представят голямо количество данни като единствен идентификационен номер (ID). Те са полезни при проверка дали данните са били подправени, както и при идентификация на данни, които са били подложени на други криптографски средства.
Често използвани хеш функции са MD5 и SHA-1, но през 2005 година и в двата алгоритъма са намерени дефекти в сигурността.

  Data Integrity 
  Integrity 
Integrity (интегритет, цялостност, непокътнатост). Терминът Data Integrity има следните значения:
1. Състоянието, в което данните са запазени непроменени по време на операции като пренос, съхранение, обработване.
2. Запазването на данни за по нататъшното им използване.
3. Термин, отнасящ се за специални операции, при които качеството на данните е от приоритетна важност.
Друг аспект на data integrity е да гарантира, че данните ще бъдат достъпни и ще могат да се променят само от упълномощените за това лица.
В криптологията и информационната сигурност, понятието integrity се отнася за валидността на данните. Цялостта на информацията може да се компрометира главно по два начина:

 Злонамерена промяна:
 Промяна на номер на сметка по време на банкова тракзакция.
 Подправяне на документ за самоличност.
 Случайна промяна:
 Грешки при предаването.
 При повреда на твърдия диск.
Хеш фунцкиите тук се използват за „подписване” на данните преди съхранението или предаването им по мрежата, за да се провери целостта им по-късно. Този "подпис" представлява криптографска контролна сума (checksum) - Message Integrity Code (MIC) или Message Authentication Code (MAC).
Cyclic redundancy check (CRC) е вид хеш функция, която се изполва за изчисляване на контролната сума (checksum) на блок от данни, като например пакет от мрежовия трафик. Контролната сума има фиксиран брой битове. След пресмятането й, тя се добавя към информацията преди да се съхрани или изпрати. Получателят сам пресмята CRC на данните, които е получил и сравнява получената контролна сума с тази в пакета. Ако съобщението се е променило по време на предаването, то двете хеш стойности няма да съвпаднат и пакетът се отхвърля.

  Peer-to-peer 
Peer-to-peer (p2p) компютърна мрежа разчита повече на изчислителната сила и пропусквателната способност на участниците в мрежата, отколкото на сървъри, чийто брой е сравнително малък. Р2Р мрежите типично се използват за свързване на възли чрез специални връзки. Тези мрежи са полезни за много цели: споделяне на файлове съдържащи аудио, видео или друг тип данни в дигитален формат, за телефонен трафик. Много peer-to-peer мрежи са под постоянни атаки от хора с ралични мотиви. Повечето атаки могат да се осуетят или контролират чрез добре проектирана peer-to-peer мрежа и чрез използването на кодиране.

  Hash list 
Хеш списък (hash list) - Хеш списък на блокове от данни във файл или няколко файла. Хеш списък се използва за много цели, като например бърз преглед на таблица (хеш таблица) или distributed databases (distributed hash tables). 
Хеш списък може да се използва за защита на информация съхранявана, обработвана и пренасяна в и между компютри. Понастоящем главната употреба на хеш списък е да се гарантира, че иформацията получена от други възли (peers) в peer-to-peer мрежа, е невредима и непроменена, и да се провери дали други пиъри не "лъжат" и изпращат фалшиви блокове от данни.
Хеш списък е по-добър от хеш на целия файл. В този случай при повреда на един блок може да се изтегли наново само той, докато при хеш на целия файл ще трябва да се изтегли наново целия файл, т.к. няма да се знае кой блок точно е повреден.
Често се прави допълнителен хеш на самия хеш списък, който се нарича root hash или master hash. Преди теглене на файл от p2p мрежа в повечето случаи се взима този root hash от надежден източник. При наличието му вече може да се изтегли самия хеш списък, от който и да е ненадежден изтичник, например пиър от p2p мрежата. Получения списък се проверява с root hash-a и ако той е повреден или фалшив, се тегли нов списък от друг източник.
В някои системи (като например BitTorrent), вместо да се използва root hash, целия хеш списък е на разположение на някой уеб сайт в малък файл. Този "торент" файл съдържа описание, имена на файлове, списък от хешове и друга допълнителна информация.

  Hash tree 
Хеш дърво (hash tree) - В криптографията хеш дърветата (известни още като Merkle trees) са разширение на идеята за хеш списъците, които от своя страна са разширение на старата идея за хеширане. Хеш дърво е дърво от хешове, чийто листа са хешове на блокове от данни във файл или няколко файла. Възлите нагоре по дървото са хешове от техните наследници. В преобладаващото мнозинство практически приложения се използват двоични хеш дървета.
Обикновено за хеширане се използват криптографските хеш функции SHA-1, Whirlpool или Tiger. Ако хеш дървото се използва само за защита от неумишлена повреда, може да се изплозват и по-малко сигурните контролни суми, като CRC.
Коренът на дървото е root hash (или master hash). В повечето случаи root hash се използва, както при хеш списъците.
Главната разлика между хеш дърво и хеш списък е, че един клон от дървото може да се изтегли по всяко време и цялостта му може да се провери веднага, дори и още да не е изтеглено цялото дърво. Това е преимущество, понеже е по-ефикасно файловете да се делят на малко блокове от данни, така че само малки блокове да се теглят наново, ако са повредени.
Ако файла е много голям, то хеш дървото или хеш списъка става сравнително голям, но ако е хеш дърво, един малък клон може да се изтегли бързо, да му се провери цялостта веднага и да се започне сваляне на блоковете от данни.

  Идентификация 
Предназначението на идентификацията е да съпоставя известна ни величина с непознат обект, за да го направи познат. Известната ни величина се нарича идентификатор или ID. Основно изискавене е ID-то да е уникално в дадена сфера. Идентификацията е способността да се намират, съобщават, променят или изтриват специфични данни без двусмислие.
Дигитален воден знак (Digital watermarking) е техника, която позволява на дадено лице да добавя скрити записи към дигитални сигнали или документи, осигуряващи авторските им права. Такива скрити съобщения представляват група битове даващи информация за сигнала или автора на сигнала (име, място, др.). Техниката получава името си от поставянето на водни знаци на хартиени документи и пари.Има два вида дигитални водни знаци - видими и невидими. Видимите променят дигиталния сигнал, така че той е тотално различен от първоначалния. Например фотографските агенции добавят добавят воден знак - символа ("©") - към своите снимки. Невидимите водни знаци не променят видимо сигнала и крайния получател на информацията не знае за тях.
Друго приложение на водните знаци е поставянето на отпечатък с информация (fingerprint) за купувача на всяко копие от продукта, закупен от него. Ако той напави нелегално копие, то то ще съдържа неговото име.

 Файлове
 Мултимедия
 Позиции на игри
 Геометрични обекти
 Дискретни структури
  Стрингове 
Хеш функциите върху низове имат широко разпространение. Такива функции се използват в алгоритъма на Rabin-Karp за търсене на поднизове.

  Връзки 
 ScStuff Хеш-таблици
 General purpose hash function algorithms (C/C++/Pascal/Java/Python/Ruby)
 Wikipedia - Hash-tables
 Wikipedia - Hash functions
 Wikipedia - Cryptographic Hash functions
 Криптография
 Wikipedia - Data Integrity
 Wikipedia - P2P
 Wikipedia - Hash List
 Wikipedia - Hash Tree
 Set
 Map
 Digital Watermark

Взето от „http://judge.openfmi.net:9080/mediawiki/index.php/%D0%A5%D0%B5%D1%88_%D0%A4%D1%83%D0%BD%D0%BA%D1%86%D0%B8%D0%B8“.
			Категории: Алгоритми | Advanced Data Structures			
						
		
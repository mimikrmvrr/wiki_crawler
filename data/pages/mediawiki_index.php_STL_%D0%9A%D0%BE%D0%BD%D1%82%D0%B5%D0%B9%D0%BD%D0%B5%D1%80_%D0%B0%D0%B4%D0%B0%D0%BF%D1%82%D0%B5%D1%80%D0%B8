STL Контейнер адаптери
			от Съзтезателно програмиране
			
									Направо към: навигация, търсене			
			  stack 
Стекът е последователност, която изпълнява операция тип "първи влязъл, последен излязъл", върху елементите си.
Понеже стековете са много често срещани структури от данни, STL ги реализира.Все пак стековете се реализират 
в STL не от нов шаблон за клас-контейнер, а чрез адаптер на контейнер наречен std::stack. Можете да използвате адаптера на контейнер std::stack за създаване на стек от обект std::vector, std::deque, std::list.
Дефиницията на адаптера на контейнер std::stack се намира във фаила "stack"(#include <stack>). 
Един обект std::stack се конструира както е показано тук:
std::stack<тип, контейнер> име;
Параметърът тип е типът данни манипулирани от стека а параметърът контейнер е типът на контейнера, 
използван в реализацията на стека - std::vector, std::deque или std::list (по подразбиране е std::deque. Де факто може да се използва всеки контейнер, който поддържа операциите back, push_back и pop_back ). Например за да създадете стек от цели числа въз основа на обект std::list може да напишете: 

std::stack<int, std::list<int> > intStack;

Понеже стековете са прости структури от данни, те изискват само основни операции. По тази причина адаптерър за контейнер std::stack дефинира само функциите :
empty( )	 Проверява дали стека е празен.
size( )	    Връща размера на стека (броя на елементите).
top( )	     Връща елемента, който се намира най-отгоре в стека.
push(x)	 Слага "х" най-отгоре в стека.
pop( )	    Премахва най-горния елемент.

  queue 
Опашката е структура от данни която реализира операции тип "първи влязъл, първи излязъл" върху елементите си. Тоест елементите в опашката се вмъкват от единия край и излизат от другия. STL реализира опашки с адаптера на контейнер, наречен std::queue. Може да използвате адаптера на контейнер std::queue, за да създадете опашка от обект std::deque или std::list (по подразбиране std::deque, или всеки контейнер, който поддържа операциите front, back, push_back и pop_front ).Дефиницията на адаптера на контейнер std::queue се намира във фаила "queue"(#include <queue>). 
Обект std::queue се конструира както е показано тук :
std::queue<тип, контейнер> име;
Параметърът тип е типът на данните, управлявани от опашката, а параметърът контейнер е типът на контейнера, използван в реализацията на опашката - или std::deque или std::list. Например, за да създадете обект std::queue от цели числа въз основа на обекта std::list, може да напишете :


	 std::queue<int, std::list<int> > intQueue; 

Понеже, подобно на стековете, опашките са много прости структури от данни, те изискват само основни операции. По тази причина адаптерът за контейнер std::queue дефинира само функциите:
empty( )	 Проверява дали опашката е празна.
size( )	    Връща размера на опашката (броя на елементите).
front( )	   Връща първият елемент в последователността.
back( )	   Връща последният елемент в последователността.
push(n)	  Прибавя стойността "n" най-отзад в последователността.
pop( )	    Премахва първият елемент.

  priority_queue 
Опашка с приоритет е структура за данни, която извлича елементи от последователност според приоритета им.
Приоритетът е основан на поставяната функция за сравнение (наречена "предикат"). Например, ако използвате
предварително дефинирания предикат std::less<> , винаги когато добавяте или отстранявате стойност от 
опашка с приоритет, контейнерите се подреждат в низходящ ред. Това задава на елемента с най-голяма 
стойност най-висок приоритет. STL реализира опашки с приоритет с адаптер на контейнер, наречен 
std::priority_queue. Можете да използвате адаптера на контейнер std::priority_queue за създаване на опашка
с приоритет от обект std::vector или std::deque (по подразбиране std::vector, или всеки контейнер, който поддържа операциите front, push_back и pop_front ). Обект std::priority_queue се конструира по следния начин :
std::priority_queue<тип, контейнер, предикат> име;
Параметърът тип е типът данни, управлявани от опашката с приоритет, а параметърът контейнер е типът
на контейнера, използван в реализацията на опашката с приоритет - или std::deque, или std::vector.Параметърът
предикат  е предикатът (функцията за сравнение), която се използва за определяне на приоритета на елементите
в опашката с приоритет. Предикатът по подразбиране е std::less<>. Например, за да създадете обект 
std::priority_queue за цели числа въз основа на обект std::vector и с използване на предиката
по подразбиране, можете да напишете:
std::priority_queue<int, std::vector<int> > intPQueue;
По този начин стойностите се подреждат, така че най-голямата стои най-отгоре в опашката. Можете да създадете 
опашка с приоритет, която организира съдържанието си въз основа на други приоритети. Например ако програмата
използва предварително дефинирания предикат std::greater<>, когато дефинира опашка с приоритет, стойността 
с най-висок приоритет е най-малката, защото стойностите са подредени в опашка с приоритет в низходящ ред.
За да конструирате такава опашка можете да напишете:
std::priority_queue<int, std::vector<int>, std::greater<>> intPQueue;
Дефиницията на адаптера за контейнер std::priority_queue се намира също във файла "queue", който трябва да 
бъде включен ( #include <queue>).Функциите членове са същите като на адаптера std::queue.





Взето от „http://judge.openfmi.net:9080/mediawiki/index.php/STL_%D0%9A%D0%BE%D0%BD%D1%82%D0%B5%D0%B9%D0%BD%D0%B5%D1%80_%D0%B0%D0%B4%D0%B0%D0%BF%D1%82%D0%B5%D1%80%D0%B8“.
			Категории: Структури от данни | STL			
						
		
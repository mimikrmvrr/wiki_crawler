Индексно дърво
			от Съзтезателно програмиране
			
									Направо към: навигация, търсене			
			 if (window.showTocToggle) { var tocShowText = "показване"; var tocHideText = "скриване"; showTocToggle(); }   Въведение 
Индексното дърво е пълно двоично дърво.То е много удобно,лесно и бързо за писане.

  Същност на стурктурата 
Листата на двоичното дърво съответстват на числата от 1 до N. Основната идея на индексното дърво е, че всяко число може да се представи като сбор на числа степени на 2-ката. Всеки връх от дървото отговаря за интервал от числата. Да разгледаме как е организирано самото дърво : 1 и 2 имат общ баща, 3 и 4 имат общ баща, 5 и 6 имат общ баща и т.н. На по-горното ниво 1,2,3 и 4 имат общ дядо , 5,6,7 и 8 имат общ дядо и т.н.

Пример:

Нека функцията която прилагаме на листата да е сбор. Тоест , бащата на 1 и 2 да държи сумата на тези числа , на 3 и 4 тяхната сума. Дядото на 1,2, 3 и 4 да държи сумата на бащите на 1 и 2 и на 3 и 4 ( т.е. сумата на числата от 1..4). Продължавайки по този начин пра-дядото на 1 ще държи интервалът (1..8 - т.е. в нашия пример това ще е сумата в клетките от 1 до 8) , който ще се е образувал от сбора на дядовците на 1 и 5 (интервалите 1..4 и 5..8) и т.н.
За да разберем по-лесно структурата да разгледаме една рисунка :
<graphviz>
//!circa!
graph g{

 node [height="0.10", width="0.10"]

 "15" -- "13"
 "15" -- "14"
 "13" -- "9"
 "13" -- "10"
 "14" -- "11"
 "14" -- "12"
 "9" -- "1"
 "9" -- "2"
 "10" -- "3"
 "10" -- "4"
 "11" -- "5"
 "11" -- "6"
 "12" -- "7"
 "12" -- "8"

}
</graphviz>
Имаме 8(начални) клетки с числа индексирани съответно с числата от 1 до 8. Съответно от дефиницията по-горе 1 и 2 имат общ баща - 9, 3 и 4 общ баща - 10 , съответно 1,2,3 и 4 общ дядо 13 и т.н. Лесно се вижда, че височината на структурата е <math>log_2(N)</math>, където N е броят на елементите. 
Да разгледаме сега как можем да намерим сумата на клетките от 1 до 5. Тръгваме от корена 15 , нашият интервал се съдържа в интервалът (1..8),но не изцяло, затова трябва да го 'раздробим' малко. Вземаме средата на интервалът на корена (1..8) и сравняваме къде се пада нашия интервал. Тъй като той участва и в 2-та интервала трябва да ги обходим. Общо взето обхождаме листата на дървото на този принцип докато не стигнем до интервал който се съдържа целият в този който търсим. Тогава просто добавяме това листо към резултата. Да се върнем към примера и да почнем с лявото дете на корена (13). Цялото то влиза в интервала чиято сума търсим, затова вземаме целия интервал 13 и спираме до тук. В дясното дете на корена виждаме, че не влиза целият интервал, затова по същия принцип намираме средата и установяваме,че  краят на нашия интервал се намира на ляво от средата <math>\Rightarrow</math> обхождаме само лявото дете на (14). Влизаме в (11) този интервал пак не се съдържа в търсеният , затова пак с средата определяме,че отиваме на ляво. Там стигаме до (5) което се съдържа в интервала ни и го добавяме. Там спираме. Да обобщим : за да намерим сумата на числата в клетките от 1..5 сме добавили (13) и (5), от картинката можем да се убедим, че сме намерили вярно сумата. За сега намерихме начин да намираме сумата от 1..X.С малко разсъждения стигаме до изводът, че при така конструираното дърво можем да намерим сумата във всеки интервал X,Y като намерим сумата на числата в интервала 1..Y и от него извадим сумата на интервалът 1..X-1. Така получихме стуктура, която отговаря на заявки за някаква функция (не е задължително да събираме числа) със сложност 2*<math>log_2(N)</math>.

  Операции 
Тук ще наблегнем повече на самата реализация на дървото.
Първото важно нещо е, как представяме самото дървто. Има няколко начина:

 1) Чрез указатели, т.е. динамично.
 2) Статично, само един масив, с 2N памет. Забележете, че е нужна 2N памет, за да поддържаме това дърво.
    Това е така, защото по дефиниция листата ни са N-те елемента, за които пазим данните, "по-горния" ред
    съдържа N/2 върха (на всеки две листа съпоставяме 1 връх, който да отговаря за този интервал от 2 елемента)
    и т.н., докато се окаже само 1 връх (корена). Сумата на броя на върховете по нива дава точно 2N-1.
    Корена на дъврото е с индекс 1, т.е., tree[1] пази функцията, която сме съпоставили на индексното дърво.
    Наследниците му са: ляв наследник - tree[2] и десен tree[3]. Да обобщим -- ако даден връх в дървото е с индекс
    i в статичното представяне на дървото, то левия му наследник е с индекс i*2, а десния с i*2+1.
 3) Статично, но с logN масива. Идеята е същата както в 2), но тук първия масив е с дължина 1, т.е. там се пази само
    корена (масива отговаря на "първия ред" на дървото), втория масив е с дължина 2, третия с 4 и т.н., последния е
    с дължина N.

 Забележка: разглеждаме случая, когато N е степен на двойката, т.е. N = 2^k. Когато N не е степен на двойката,
    винаги можем да допълнем броя на елементите до степен на двойката с "празни" елементи, т.е. условно създаваме
    допълнителни елементи, за да спазим структурата на дървото (пълно двоично дърво).


Индексното дърво поддържа две основни операции и те са update и query, т.е. операция за update-ване на функцията за
даден елемент и операция за връщане на функцията, която сме съпоставили на индексното дърво, за даден интервал (x, y).
Първо да разгледаме операцията update. Тя има два параметъра -- точка (елемент), който ъпдейтваме и стойност, с която
ъпдейтваме. За пояснение, ще дадем пример, в който функцията на индексното дърво е сума-от-стойностите-за-интервал(x, y),
т.е. update-операцията добавя в точка някаква стойност, а query-операцията връща сумата от стойностите за даден интервал.
От тук надолу ще говорим само за такова индексно дърво (на което сме съпоставили гореописаната функция).
Тук операцията update трябва да добави в някаква точка известна стойност, като, разбира се, освен добавяне трябва и да
ъпдейтне върховете, които отговарят за точката, в която сме добавяли. Примерно, ако добавяме в точка 1, ние трябва да
ъпдейтнем листото, което отговаря за точка 1, след това прекия му баща, който отговаря за (1, 2), дядо му, който отговаря
за (1, 4) и т.н. до самия корен на дървото.
За целта се оказва по-лесно да тръгнем от корена на дървото към листата на дървото, на принципа на двоичното търсене.
Когато се намираме във връх i (т.е. във връх с индекс i), ние сме сигурни, че един от елементите, за които той отговаря, е
този, за който ъпдейтваме. Ъпдейтваме връх i, определяме "в коя посока" (наляво или надясно, т.е. къде спрямо средния елемент
се намира "нашия") и пресмятаме индексите на новата ситуация (т.е. новото i, и l и r, т.е. лявата и дясната граница на индексите
на елменетите, за които ъпдейтваме).
Прилагам псевдокод:

   update(index, value) {
       i = 1; l = 1; r = n;
       while (l < r){
           tree[i] = tree[i] + value;
           mid = (l + r) / 2;
           if (index <= mid) 
               i = i * 2;
               r = mid;
           else 
               i = i * 2 + 1;
               l = mid + 1;
           }
       tree[i] = tree[i] + value;
   }

Забележете, че когато искаме да "del-ваме" от даден индекс, ние просто му добавяме с отрицателен знак стойността, която
искаме да премахнем от него.
А ето и по кратка реализация на update:

  void update(int pos,int data){
     pos+=n-1; //това е така, защото на елемента с ключ (pos) в пирамидата съответства индекс (pos+n-1)
     while(pos>0){
        a[pos]+=data;
        pos/=2;
     }
  }


Query-операцията се реализира по много сходен принцип. Важно е да отбележим, че когато ни интересува резултата от
функцията на индексното дърво за (x, y), ние я пресмятаме когато намираме резултата по следния начин: 

    query_tree(x, y) = query_tree(1, y) - query_tree(1, x-1)

Това равенство ни дава възможноста за следния начин на query (забележете, че вече query-ваме само по един индекс, т.е.
функцията query е само с един параметър index, и тя връща query_tree(1, index)): 
Отново тръгваме от корена към листата и когато сме в индекс i, ако index е в "дясната" половина на интервала, за който
i отговаря, ние трябва да вземем предвид резултата на първата половина, т.е. ако търсим query(3) във дърво с 4 елемента,
то, когато сме в корена на дървото, преди да слезнем по дървото "надясно", тъй като 3 е във "дясната" половина, ние трябва
към текущия резултат да добавим функцията на дървото за "лявата" половина, защото и тя влиза в интервала от 1 до 3.
Когато, обаче, index е в лявата половина, ние просто пресмятаме границите на новия интервал, за който отговаряме и съответно
пресмятаме i = i * 2.
Прилагам псевдокод:

   query(index) {
       i = 1; l = 1; r = n; value = 0;
       while (l < r){
           mid = (l + r) / 2;
           if (index <= mid)
               i = i * 2;
               r = mid;
           else
               value = value + tree[i * 2];
               i = i * 2 + 1;
               l = mid + 1;
       }
       value = value + tree[i];
   }

Друга реализация на query:

  int query(int pos){
     pos+=n-1;
     int data=0;
  
     while(pos>0){
        if(pos%2){
           data+=a[pos-1];
           pos/=2;
        }
        else pos/=2;
     }
  
     return data;
  }
 

Така, вече знаейки двете основни операции на индексното дърво, можем да насочим вниманието си към примерните задачи, които
изискват ползването на тази структура.

  Приложение - задачи 
Circle - Пролет 2003 - А групаhttp://infoman.musala.com/contests/spring/2003/problems_A.rtf
Тази задача е типичен пример за приложението на представената структура. 
Ако за дадена дъга [a,b], (a<b), искаме да намерим всички които я пресичат, то тогава имаме 2 варианта:
(1) дъги от вида [c,d] като c < a и d принадлежи на (a,b),
(2) дъги от вида [c,d] като d > b и c принадлежи на (a,b).
Ако разглеждаме и 2-та случея за всяка от дъгите ще броим всички точки по 2 пъти. Забелязваме че всяка от пресечните точки се намира точно един път от (1) и един път от (2) поради местоположението на дъгите. Затова ще броим само точки от (2). 
Важна точка ще наричаме точка в която започва или завършва дадена дъга. Въз основа на разсъжденията дотук се спираме на следния алгоритъм:


1) Сортираме всички важни точки
2) За всяка от точките
	2.1) Ако точката е начална, отбелязваме че на дадения индекс имаме начало на дъга.
	2.1) Ако точката е крайна, броим всички точки които сме отбелязали като начални 
             за интервала на дъгата за която текущата точка е крайна. Премахваме съответната 
             начална точка на разглежданата крайна.

Това което винаги спазваме в алгоритъма е че всички точки които имаме отбелязани като начални преди дадената разглеждана крайна завършват след нея. Това означава че точно броя на тези точки е броя на дъгите които пресичат дъгата за която разглежданата точка е крайна по условие (2).Остана да изясним използването на Индексно дърво. Тук то е представено в най-чистия си вид - добавяне на точка и намиране на брой точки в даден интервал. Сложността на 2-те операции е <math>logN</math> което ни дава крайна сложност от <math>NlogN</math>. Важно да се отбележи е нуждата от използването на 64 битови типове. Ето и част от реализацията на описания по-горе алгоритъм. 
(За улеснение не използваме сортиране, а се възползваме от условието че всички точки принадлежат на точно една дъга.)


int main () {
    scanf("%d",&N);
    for (int i=1; i<=N; i++) {
        scanf("%d%d",&a,&b);
        ar[a] = b; ar[b] = a;
    }
  
    for (int i=1; i<=2*N; i++) {
        if (ar[i] > i) update(i,1);
        else {	
               update(ar[i],-1);
               answer += query_tree(ar[i],i);
        }
    }
    printf("%lld\n",answer);
    return 0;
}

  Ресурси 
 Тренировки на националния отбор 2003/2004г. с огромната подкрепа на Велин Цанов.
Официално решение на mobiles + описание на структурата: http://olympiads.win.tue.nl/ioi/ioi2001/contest/A-2001-7.pdf 
Други задачи, които се решават с помоща на индексно дърво :

 Winter - http://infoman.musala.com/contests/booi/booi2/winter.htm
 Round - http://infoman.musala.com/contests/spring/2004/problems_A.html
 FBI - http://infoman.musala.com/contests/fall/2003/problems_B.html
 Ultra Sort - http://acm.uva.es/p/v108/10810.html

Взето от „http://judge.openfmi.net:9080/mediawiki/index.php/%D0%98%D0%BD%D0%B4%D0%B5%D0%BA%D1%81%D0%BD%D0%BE_%D0%B4%D1%8A%D1%80%D0%B2%D0%BE“.
			Категории: Структури от данни | Advanced Data Structures			
						
		
Skip List ADS
			от Съзтезателно програмиране
			
									Направо към: навигация, търсене			
			 if (window.showTocToggle) { var tocShowText = "показване"; var tocHideText = "скриване"; showTocToggle(); }   Въведение 
Структурата Skip List е създадена от William Pugh като недетирминистична (вероятностна) алтернатива на двоичните дървета за търсене, като се постигат логаритмични сложности за основните операции, освен в много редки случаи. Като недетерминистична (вероятностна) структура, skip list се поддържа почти балансирана, което я прави значително по-лесна за реализация. Предимства на skip list пред двоичните дървета са много по-лесната реализация, което понякога води до подобряване на константата , както и количеството заемана памет - средния брой на указатели от всеки елемент може лесно да се сведе до 1.33, като не е необходимо да се пази допълнителна информация за балансиране или приоритет на елементите. Друга характеристика на Skip list е, че скоростта на добавяне на елементи не зависи от стойностите, които се подават като вход. За недостатък на структурата се счита променливият брой указатели от даден елемент, който зависи от определена вероятност.

  Структура 
Skip list представлява разширение на нареден свързан списък, като всеки възел съдържа, освен стойност и връзка към следващия, и връзки към множество възли напред в списъка. Така при търсене на елемент тези връзки могат да се използват за прескачане ( skip-ване ) на възли и по-бързо достигане на търсения. Структурата най-често се разглежда като съставена от няколко свързани списъка, наричани слоеве, като всеки елемент принадлежи на определен ( чрез специална функция, зависеща от дадена вероятност p) брой слоеве равен на броя връзки, които той съдържа. Така най-долният слой съдържа всички елементи, слоят над него съдържа тези елементи, които имат указатели към поне два елемента и т.н.
Броят връзки за даден елемент (броят слоеве, в които се включва) се нарича ниво (височина) на елемента и се определя при добавяне. Всеки елемент съдържа по един указател за всеки слой, в който се включва и всеки указател сочи към следващия елемент в съответния слой. Първият елемент в структурата е фиктивен и няма стойност, той има максимална височина (която се определя в началото в зависимост от целите на задачата) и в началото (за празна структура) съдържа само празни указатели.
пример:


0--------------------13-------X - IV слой
0--1-------7---------13-------X - III слой
0--1---4---7---10----13-17----X - II слой
0--1-3-4-6-7-8-10-12-13-17-20-X - I слой

 един детерминиран вариант
Нека построим нашата структура така: всеки елемент, който е на четна позиция принадлежи и на втория слой, всеки елемент, чиято позиция се дели на 4 принадлежи и на третия слой и т.н. всеки елемент, чиято позиция се дели на степен на 2 има височина = съответната степен на двойката +1:


0------------------- ...
0---------------8--- ...
0-------4-------8--- ...
0---2---4---6---8--- ...
0-1-2-3-4-5-6-7-8-9- ...

Всеки слой съдържа 1/2 от елементите на слоя под него, и к-тия слой съдържа (1/2)к от елементите на първия слой.При търсене се получават най-много (log2n)+1 елементи, които ще бъдат обходени, но добавянето и изтриването биха били доста сложни операции.

 вероятност и функция за определяне на височината на елемент
Дефинираме p като средният брой елементи от к-тия слой , които принадлежат и на к+1-вия слой. В детерминирания случай, който разгледахме p е 1/2 и за всеки елемент е определена височината. Известно е, че ако при добавяне на нов елемент се спазва единствено правилото: 
" вероятността новия елемент да има ниво L е равна на p(L-1) " сложността на операцията търсене се очаква да е O(log1/pn).
Височината на нов елемент се определя чрез следната функция (или подобна)


getLevel()
{
  level = 1;
  while( random(0,1) < p && level < maxLevel) // където random(0,1) връща случайна стойност от 0 до 1
    level++;
  return level;
}  

  Операции 
Структурата е създадена като алтернатива на двоичните дървета за търсене и като такава поддържа основните операции за дървета. Съществуват модификации на метода, чрез които се реализират и по-специфични операции, възможни за двоичните дървета.

  Search 
Търсенето на елемент в skip list се състои в последователно обхождане на някои елементи на списъка, до достигане на търсената стойност или по-голяма от нея (тук се предполага, че елементите в списъка са подредени възходящо). 
Търсенето започва от началния фиктивен елемент от най-високото до момента ниво за структурата, началният елемент става текущ. 
Повтаряме следните стъпки до намиране на елемента или докато текущото ниво е > 0 
-Ако указателя на текущото ниво на текущия елемент сочи към елемент със стойност по-голяма от търсената или е празен, намаляваме текущото ниво с 1;
-Ако сочи към елемент със стойност по-малка от търсената , текущ елемент става сочения ;
-Ако сочи към елемент със стойност равна на търсената значи съществува такъв елемент.
аплет
примерен код:


bool search(int value,node* header)
{
	int level = list_level;
	node* current_node = header;
	while(level > 0)
	{
		if(current_node->links[level]==NULL)
			--level;
		else if(current_node->links[level]->value > value) 
			--level;
		else if(current_node->links[level]->value == value)
			return true;
		else
			current_node = current_node->links[level];
	}
	return false;
}

  insert
При insert се използва алгоритъма на search за да се намери позицията с разликата, че се пази масив (update[max_level]) от указатели сочещи към елементите непосредствено преди новия на всички нива.
При достигане на позицията, на която ще се добави елемент, се създава нов елемент като се използва функцията за генериране на височината му и новият елемент се добавя на съответното място, ако новия елемент има по-голяма височина от максималната до момента за списъка, тя се обновява.
Накрая се update-ват елементите от масива update и се задават стойности на указателите на добавения елемент ( new_node->links[i] = update->links[i] )

  delete 
Изтриването на елемент от skip list става подобно на добавянето: 
създава се масива update[max_level];
обхожда се списъка надолу и надясно, като в update[] се записват най-десните възли отляво на търсения, до намиране на елемента;
ако е намерен елемент за изтриване се променя указателят на i-то ниво на елемента от update[i] да сочи към deleted_node->links[i] , за всяко i от 1 до височината на deleted_node;
изтрива се deleted_node (ако стойността е намерена);
ако deleted_node е бил единственият възел с височина = max_level, се намалява височината (това е същото като header[max_level] == NULL ) ;

 Анализ
 Избор на p
Както споменах по-рано очакваната сложност на операциите над структурата е О(log1/pn) , което зависи от p, досега стана дума само за p=1/2 . При промяна на p се променя и поведението на операциите, като при по-малко p се увеличава варирането (несигурността) на сложността. В следната таблица са дадени зависимостите между p , бързината и заеманата памет:

 p  (log1/pn)/p  ср. брой указатели на възел
 1/2  1  2
 1/e  0.94  1.58
 1/4  1  1.33
 1/8  1.33  1.14
 1/16  2  1.07
За най-добър избор в общия случай се смята p=1/2 или p=1/4 като при 1/4 се постига малко по-добра константа.

 Анализ на сложността
При search, insert и delete сложността се определя от сложността на search, при insert и delete се прибавя и време, зависещо линейно от нивото на съответния елемент.
За да определим времето за търсене ще разгледаме обратния път от намерения елемент до началото на списъка т.е. ще се движим нагоре и наляво. Да предположим, че се намираме в к-тия указател на елемента х , трябва да продължим нагоре или наляво, но не знаем дали за х съществува к+1-ви указател. Вероятността да съществува к+1 ви указател е p т.е. вероятността да продължим нагоре е p => вероятността да продължим надясно е 1-p (при условие че х не е началният елемент). 
Да означим с C(m) цената на m стъпки назад по този път. Тогава
C(0) = 0
C(m) = p(цената след стъпка нагоре) + (1-p)(цената след стъпка надясно)
C(m) = p.C(m-1) + (1-p)C(m)
C(m) = 1/p + C(m-1) = m/p
Тъй като списъка не е безкраен от ниво 1 се стига до най-горния най-ляв елемент, (предполагайки, че той е на ниво не по голямо от log1/pn очакваме дължина на пътя не повече от ((log1/pn) -1)/p .
След достигането на ниво log1/pn продължаваме разсъжденията по друг начин:
броя движения надясно се определя от броя елементи в списъка с височина над log1/pn . Очакването за този брой е 1/p .
Движенията нагоре от нивото log1/pn до максималния елемент е равен на разликата им, за която се очаква да е 1/(1-p)
Така очакваното време необходимо за търсене е (по-малко или равно на) (log1/pn)/p + 1/(1–p) , което е O(log n).

  Примери 
 Полезни връзки
 оригиналната статия на W. Pugh
 повече анализ и разширения на структурата
 аплет за търсене и добавяне на елементи
 статия в wikipedia

Взето от „http://judge.openfmi.net:9080/mediawiki/index.php/Skip_List_ADS“.
			Категории: Структури от данни | Advanced Data Structures			
						
		